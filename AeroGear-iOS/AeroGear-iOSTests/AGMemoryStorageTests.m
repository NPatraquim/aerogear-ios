/*
 * JBoss, Home of Professional Open Source.
 * Copyright Red Hat, Inc., and individual contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <SenTestingKit/SenTestingKit.h>

#import "AGMemoryStorage.h"

@interface AGMemoryStorageTests : SenTestCase

@end

@implementation AGMemoryStorageTests {
    AGMemoryStorage* _memStore;
}

-(void)setUp {
    [super setUp];
    
    AGStoreConfiguration* config = [[AGStoreConfiguration alloc] init];
    [config setRecordId:@"id"];
    
    _memStore = [AGMemoryStorage storeWithConfig:config];
}

-(void)tearDown {
    _memStore = nil;

    [super tearDown];
}

-(void) testMemoryStorageCreation {
    STAssertNotNil(_memStore, @"storage should not be nil");
}

-(void) testSave {
    NSMutableDictionary* user = [NSMutableDictionary
                                 dictionaryWithObjectsAndKeys:@"Robert",@"name",@"0",@"id", nil];
    
    BOOL success = [_memStore save:user error:nil];
    STAssertTrue(success, @"save should have succeeded");
}

-(void) testSaveWithOutId {
    NSMutableDictionary* user = [NSMutableDictionary
                                 dictionaryWithObjectsAndKeys:@"Robert",@"name", nil];
    
    BOOL success = [_memStore save:user error:nil];
    STAssertTrue(success, @"save should have succeeded");
}

-(void) testSaveAutoGeneratedId {
    NSMutableDictionary* user = [NSMutableDictionary
                                 dictionaryWithObjectsAndKeys:@"Robert",@"name", nil];
    
    BOOL success = [_memStore save:user error:nil];
    STAssertTrue(success, @"save should have succeeded");

    // save should have set the ID
    STAssertNotNil([user valueForKey:@"id"], @"object should not be nil");
}

-(void) testSaveWithNoIdAndCustomIdSetting {
    NSMutableDictionary* user = [NSMutableDictionary
                                 dictionaryWithObjectsAndKeys:@"Robert",@"name", nil];
    
    
    AGStoreConfiguration* config = [[AGStoreConfiguration alloc] init];
    // apply a custom ID config...
    [config setRecordId:@"myId"];
    // re init the store:
    _memStore = [AGMemoryStorage storeWithConfig:config];

    BOOL success = [_memStore save:user error:nil];
    STAssertTrue(success, @"save should have succeeded");

    // save should have set custom ID
    STAssertNotNil([user valueForKey:@"myId"], @"object should not be nil");
}

-(void) testRead {
    NSMutableDictionary* user = [NSMutableDictionary
                                 dictionaryWithObjectsAndKeys:@"Robert",@"name",@"0",@"id", nil];

    //save it
    BOOL success = [_memStore save:user error:nil];
    STAssertTrue(success, @"save should have succeeded");

    // read it
    NSMutableDictionary* read = [_memStore read:@"0"];
    STAssertEqualObjects(@"Robert", [read valueForKey:@"name"], @"should be equal");
}

-(void) testReadNonExisting {
    NSMutableDictionary* user = [NSMutableDictionary
                                 dictionaryWithObjectsAndKeys:@"Robert",@"name",@"0",@"id", nil];
    
    // save it
    BOOL success = [_memStore save:user error:nil];
    STAssertTrue(success, @"save should have succeeded");
    
    // read it
    NSMutableDictionary* read = [_memStore read:@"1"];
    STAssertNil(read, @"object should be nil");
}

-(void) testRemove {
    NSMutableDictionary* user = [NSMutableDictionary
                                 dictionaryWithObjectsAndKeys:@"0",@"id", @"Robert",@"name", nil];

    BOOL success;
    
    // save it
    success = [_memStore save:user error:nil];
    STAssertTrue(success, @"save should have succeeded");
    
    // read it
    NSMutableDictionary* readSaved = [_memStore read:@"0"];
    STAssertEqualObjects(@"Robert", [readSaved valueForKey:@"name"], @"should be equal");

    // remove it
    success = [_memStore remove:readSaved error:nil];
    STAssertTrue(success, @"remove should have succeeded");

    // read it
    NSMutableDictionary* readRemoved = [_memStore read:@"0"];
    STAssertNil(readRemoved, @"object should be nil");
}

-(void) testRemoveNonExisting {
    NSMutableDictionary* user = [NSMutableDictionary
                                 dictionaryWithObjectsAndKeys:@"0",@"id", @"Robert",@"name", nil];
    
    BOOL success;
    
    // save it
    success = [_memStore save:user error:nil];
    STAssertTrue(success, @"save should have succeeded");
    
    // read it
    NSMutableDictionary* readSaved = [_memStore read:@"0"];
    STAssertEqualObjects(@"Robert", [readSaved valueForKey:@"name"], @"should be equal");
    
    // remove non existant
    NSMutableDictionary* noUser = [NSMutableDictionary
                                 dictionaryWithObjectsAndKeys:@"1",@"id", @"Robert",@"name", nil];
    
    success = [_memStore remove:noUser error:nil];
    STAssertTrue(success, @"remove should NOT HAVE succeeded");
    
    // read it
    NSMutableDictionary* readExisting = [_memStore read:@"0"];
    STAssertEqualObjects(@"Robert", [readExisting valueForKey:@"name"], @"should be equal");
}

-(void) testReset {
    NSMutableDictionary* user1 = [NSMutableDictionary
                                 dictionaryWithObjectsAndKeys:@"0",@"id", @"Robert",@"name", nil];
    NSMutableDictionary* user2 = [NSMutableDictionary
                                 dictionaryWithObjectsAndKeys:@"1",@"id", @"John",@"name", nil];
    
    
    NSArray* users = [NSArray arrayWithObjects:user1, user2, nil];

    BOOL success;
    
    // save objects
    success = [_memStore save:users error:nil];
    STAssertTrue(success, @"save should have succeeded");

    // read first object
    NSMutableDictionary* readFirstObject = [_memStore read:@"0"];
    STAssertEqualObjects(@"Robert", [readFirstObject valueForKey:@"name"], @"should be equal");
    
    // read second object
    NSMutableDictionary* readSecondObject = [_memStore read:@"1"];
    STAssertEqualObjects(@"John", [readSecondObject valueForKey:@"name"], @"should be equal");

    // reset all objects
    success = [_memStore reset:nil];
    STAssertTrue(success, @"reset should not have failed");
    
    NSMutableDictionary *readRemoved;
    
    // read first object
    readRemoved = [_memStore read:@"0"];
    STAssertNil(readRemoved, @"object should be nil");
    
    // read second object
    readRemoved = [_memStore read:@"1"];
    STAssertNil(readRemoved, @"object should be nil");
}

-(void) testReadAll {
    NSMutableDictionary* user1 = [NSMutableDictionary
                                  dictionaryWithObjectsAndKeys:@"0",@"id", @"Robert",@"name", nil];
    NSMutableDictionary* user2 = [NSMutableDictionary
                                  dictionaryWithObjectsAndKeys:@"1",@"id", @"John",@"name", nil];
    
    
    NSArray* users = [NSArray arrayWithObjects:user1, user2, nil];
    
    BOOL success;
    
    // save objects
    success = [_memStore save:users error:nil];
    STAssertTrue(success, @"save should have succeeded");

    
    NSArray* objects = [_memStore readAll];
    
    STAssertEquals((NSUInteger)2, [objects count], @"Must be equal size");

    STAssertTrue([objects containsObject:user1], @"store should contain object");
    STAssertTrue([objects containsObject:user2], @"store should contain object");
}

-(void)testReadWithEmptyStore {
    NSMutableDictionary *user = [_memStore read:@"0"];
    STAssertNil(user, @"object should be nil");
}

-(void)testReadAllWithEmptyStore {
    NSArray* readAll = [_memStore readAll];
    
    STAssertEquals((NSUInteger)0, [readAll count], @"Must be size 0");
}

@end
